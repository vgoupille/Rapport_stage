# Appendix A {#sec-appendix-a}

## Media composition {#sec-appendix-media}

The following table details the composition of the culture media used in this study.

| Component    | M9F (mL) | M9 (mL)  |
|--------------|----------|----------|
| Base M9      | 125      | 125      |
| Glucose 1M   | 2.5      | 0.25     |
| MgSO4 1M     | 0.25     | 0.25     |
| CaCl2 1M     | 0.0125   | 0.0125   |
| FeCl3 100mM  | 0.1277   | 0        |
| **Vf (mL)**  | **127.7625** | **125.5125** |

: Media composition for bacterial culture experiments {#tbl-media}

The M9 medium represents low nutrient conditions with minimal glucose and iron concentrations, while M9F medium provides high nutrient availability with elevated glucose and iron levels.

## Growth curves data {#sec-appendix-growth}

The following table presents the optical density (OD) measurements for each culture condition and biological replicate at the three timepoints.

| Culture Medium | Rep Bio | OD1 (T1) | OD2 (T2) | OD3 (T3) |
|----------------|---------|----------|----------|----------|
| M9             | A       | 0.130    | 0.280    | 0.260    |
| M9             | B       | 0.130    | 0.280    | 0.260    |
| M9             | C       | 0.130    | 0.328    | 0.260    |
| M9F            | A       | 0.173    | 0.588    | 0.773    |
| M9F            | B       | 0.208    | 0.627    | 0.834    |
| M9F            | C       | 0.168    | 0.603    | 0.740    |

: Growth curves data for bacterial culture experiments {#tbl-growth-curves}

## TSO removal statistics {#sec-appendix-tso}

The following table summarizes the number of R1 reads before and after TSO removal for each sample, as well as the corresponding percentage.

| Sample    | Total R1     | R1 with TSO removed | Percentage (%) |
|-----------|--------------|--------------------|----------------|
| BC_0076   | 631,393,326  | 153,472,373        | 24.3           |
| BC_0077   | 325,495,590  | 90,142,002         | 27.7           |
| BC_0079   | 379,108,253  | 102,386,519        | 27.0           |
| BC_0080   | 397,654,767  | 99,430,515         | 25.0           |

: TSO removal statistics for each sample. The table shows the total number of R1 reads, the number of R1 reads after TSO sequence removal, and the corresponding percentage. {#tbl-tso-removal}

// Table added to summarize TSO removal efficiency for each sample.
// ... existing code ...

## Trimming pipeline steps {#sec-appendix-trimming-steps}

The following steps were performed sequentially for read trimming, as implemented in the custom pipeline (see process_sample.sh). Each step is performed in paired-end mode to maintain synchronization between R1 and R2 files.

1. **TSO trimming (Cutadapt):**  
   Removal of template-switching oligo (TSO) sequences from R1 using Cutadapt. This step targets TSO sequences at the 5' end of cDNA reads to eliminate technical artifacts.
   ```bash
   cutadapt -j ${SLURM_CPUS_PER_TASK} \
       -g "AAGCAGTGGTATCAACGCAGAGTGAATGGG; min_overlap=6; max_errors=0.2" \
       -g "CAGAGTGAATGGG; min_overlap=6; max_errors=0.2" \
       --pair-filter=both \
       -m 20: \
       --too-short-output "${output_dir}/${sample_name}_R1_too_short.fastq.gz" \
       --too-short-paired-output "${output_dir}/${sample_name}_R2_too_short.fastq.gz" \
       -o "${r1_output}" \
       -p "${r2_output}" \
       "${r1_input}" "${r2_input}" \
       --report=full \
       --json "${output_dir}/${sample_name}_stats.json"
   ```

2. **Initial quality and adapter trimming (Fastp):**  
   Removal of low-quality bases, polyG/polyX tails, and adapter sequences using Fastp. This step also removes the TruSeq Read 2 adapter and I7 adapter at the end of R1 if present.
   ```bash
   fastp \
       -i "${r1_input}" \
       -I "${r2_input}" \
       -o "${r1_output}" \
       -O "${r2_output}" \
       --html "${output_dir}/${sample_name}_report.html" \
       --json "${output_dir}/${sample_name}_report.json" \
       --report_title "microSplit Initial Fastp Report - ${sample_name}" \
       --compression 4 \
       --verbose \
       --unpaired1 "${unpaired1}" \
       --unpaired2 "${unpaired2}" \
       --length_required 91 \
       --dont_overwrite \
       --trim_front1 0 \
       --trim_front2 0 \
       --trim_tail1 0 \
       --trim_tail2 0 \
       --trim_poly_g \
       --poly_g_min_len 10 \
       --trim_poly_x \
       --poly_x_min_len 12 \
       --detect_adapter_for_pe \
       --adapter_sequence=ATCTCGTATGCCGTCTTCTGCTTGA \
       --adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC
   ```

3. **PolyA trimming (Cutadapt):**  
   Removal of polyA stretches (â‰¥12 nt) from R1 using Cutadapt, targeting polyA sequences introduced during library preparation.
   ```bash
   cutadapt -j ${SLURM_CPUS_PER_TASK} \
       -a "A{12}; min_overlap=12; max_errors=0.2" \
       --pair-filter=both \
       -m 20: \
       --too-short-output "${output_dir}/${sample_name}_R1_too_short.fastq.gz" \
       --too-short-paired-output "${output_dir}/${sample_name}_R2_too_short.fastq.gz" \
       -o "${r1_output}" \
       -p "${r2_output}" \
       "${r1_input}" "${r2_input}" \
       --report=full \
       --json "${output_dir}/${sample_name}_stats.json"
   ```
   This step trims polyA15 and longer stretches that may remain after the previous steps.

4. **Specific adapter trimming (Cutadapt):**  
   Removal of the specific adapter sequence CCACAGTCTCAAGCAC from R1 using Cutadapt (corresponds to the linker sequence).
   ```bash
   cutadapt -j ${SLURM_CPUS_PER_TASK} \
       -a "CCACAGTCTCAAGCAC; min_overlap=6; max_errors=0.1" \
       --pair-filter=both \
       -m 20: \
       --too-short-output "${output_dir}/${sample_name}_R1_too_short.fastq.gz" \
       --too-short-paired-output "${output_dir}/${sample_name}_R2_too_short.fastq.gz" \
       -o "${r1_output}" \
       -p "${r2_output}" \
       "${r1_input}" "${r2_input}" \
       --report=full \
       --json "${output_dir}/${sample_name}_stats.json"
   ```

5. **Linker and additional adapter trimming (Cutadapt):**  
   Removal of linker and additional adapter sequences (e.g., CCACAGTCTCAAGCACGTGGAT, AGTCGTACGCCGATGCGAAACATCGGCCAC, AGATCGGAAGAGCACACGTCTGAACTCCAGTCA) from R1 using Cutadapt, to further clean the reads.  
   This step ensures that any remaining linker or adapter sequences are removed for certain libraries.
   ```bash
   cutadapt -j ${SLURM_CPUS_PER_TASK} \
       -a "CCACAGTCTCAAGCACGTGGAT; min_overlap=6; max_errors=0.2" \
       -a "AGTCGTACGCCGATGCGAAACATCGGCCAC; min_overlap=6; max_errors=0.2" \
       -a "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; min_overlap=6; max_errors=0.2" \
       --pair-filter=both \
       -m 20: \
       --too-short-output "${output_dir}/${sample_name}_R1_too_short.fastq.gz" \
       --too-short-paired-output "${output_dir}/${sample_name}_R2_too_short.fastq.gz" \
       -o "${r1_output}" \
       -p "${r2_output}" \
       "${r1_input}" "${r2_input}" \
       --report=full \
       --json "${output_dir}/${sample_name}_stats.json"
   ```

6. **Final quality and length filtering (Fastp):**  
   Final trimming with Fastp, including additional adapter removal, trimming of fixed bases from the 5' and 3' ends, and filtering for minimum read length to ensure high-quality output for downstream analysis.  
   This step trims R1 at the end to keep only cDNA.
   ```bash
   fastp \
       -i "${r1_input}" \
       -I "${r2_input}" \
       -o "${r1_output}" \
       -O "${r2_output}" \
       --trim_front1 10 \
       --trim_front2 0 \
       --trim_tail1 16 \
       --trim_tail2 0 \
       --length_required 25 \
       --detect_adapter_for_pe \
       --adapter_sequence=AAGCAGTGGTATCAACGCAGAGTGAATGGG \
       --adapter_sequence=CCACAGTCTCAAGCACGTGGAT \
       --adapter_sequence=AGTCGTACGCCGATGCGAAACATCGGCCAC \
       --adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \
       --html "${output_dir}/${sample_name}_report.html" \
       --json "${output_dir}/${sample_name}_report.json" \
       --report_title "microSplit Final Fastp Report - ${sample_name}" \
       --compression 4 \
       --verbose
   ```

Each step is performed in paired-end mode to ensure synchronization between R1 and R2 files. See the pipeline script for implementation details.

- plan de plaque 
- librairies avec TSO 
- tableau choix de profondeur / nombre de 
cellules 
- mettre difference entre experience de 
kuhina et la notre pour les resultats de 
Starsolo 