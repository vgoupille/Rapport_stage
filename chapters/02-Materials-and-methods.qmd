# Materials and Methods {#sec-materials-and-methods}

## Bacterial culture

```{mermaid}
%%| fig-width: 4
%%| fig-height: 3
%%| label: fig-experimental-design
%%| fig-cap: "Experimental design for bacterial culture"
graph TD
    A["Start culture <br> *P. brassicacearum PR401* <br> in petri dish"] --> B{"transfer to liquid medium"}
    B --> C["**M9** : Low glucose and iron"]
    B --> D["**M9F** : High glucose and iron"]
    C --> E{3 biological replicates}
    D --> F{3 biological replicates}
    E --> G[**Rep A**]
    E --> H[**Rep B**]
    E --> I[**Rep C**]
    F --> J[**Rep A**]
    F --> K[**Rep B**]
    F --> L[**Rep C**]
    G --> M[OD : **T1**, **T2**, **T3**]
    H --> N[OD : **T1**, **T2**, **T3**]
    I --> O[OD : **T1**, **T2**, **T3**]
    J --> P[OD : **T1**, **T2**, **T3**]
    K --> Q[OD : **T1**, **T2**, **T3**]
    L --> R[OD : **T1**, **T2**, **T3**]
    
    %% Color styling
    A:::start
    B:::decision
    C:::m9f
    D:::m9
    E:::replicate
    F:::replicate
    G:::rep
    H:::rep
    I:::rep
    J:::rep
    K:::rep
    L:::rep
    M:::measurement
    N:::measurement
    O:::measurement
    P:::measurement
    Q:::measurement
    R:::measurement
    
    classDef start fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef decision fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef m9 fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef m9f fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef replicate fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef rep fill:#fff9c4,stroke:#f57f17,stroke-width:2px
    classDef measurement fill:#e0f2f1,stroke:#004d40,stroke-width:2px
```

 *The workflow illustrates the progression from initial culture of P. brassicacearum R401 on petri dishes to liquid culture in two different media: M9 (low glucose and iron) and M9F (high glucose and iron). Each medium condition was replicated three times (Rep A, B, C) and growth was monitored at three timepoints (T1, T2, T3) by optical density measurements. This design resulted in 18 total experimental conditions (2 media × 3 biological replicates × 3 timepoints) for subsequent single-cell RNA-seq analysis.*




An isogenic^[An isogenic population refers to a group of organisms that are genetically identical, derived from a single ancestral cell or clone.] population of *P. brassicacearum* R401 was initially cultured on petri dishes and then transferred to different liquid media to investigate the effects of nutrient availability on bacterial growth and gene expression (@fig-experimental-design).

Two distinct culture conditions were applied to the bacteria: M9 medium containing low glucose and low iron concentrations, and M9F medium containing high glucose and high iron concentrations (see @tbl-media for detailed concentrations). Each condition was replicated three times to ensure statistical robustness of the experimental results. The bacterial growth was monitored by measuring optical density (OD) at regular intervals. The growth curves obtained from these measurements are presented (@fig-growth-curves) and (@tbl-growth-curves). This experimental design resulted in a total of 18 conditions: 2 media types × 3 biological replicates × 3 time points, providing comprehensive coverage of the growth dynamics under different nutrient conditions.
<!-- 
{{< embed ../data/data_growth.ipynb#plot_growth >}} -->

![Bacterial growth dynamics of *P. brassicacearum* R401 populations measured by optical density (OD600) cultured under two different nutrient conditions: M9 (low glucose/iron) and M9F (high glucose/iron).](../figures/growth_curves_all.png){#fig-growth-curves fig-cap="Bacterial growth dynamics of *P. brassicacearum* R401 populations measured by optical density (OD600) cultured under two different nutrient conditions: M9 (low glucose/iron) and M9F (high glucose/iron)."}

*Measurements were taken at three timepoints (T1, T2, T3) for three biological replicates (Rep A, B, C).*

The growth curves reveal distinct patterns between the two culture conditions. Bacteria grown in M9F medium (high glucose and iron) exhibited significantly higher growth rates and reached higher optical densities (OD 0.17-0.21 at T1, 0.59-0.63 at T2, 0.74-0.83 at T3) compared to M9 medium (low glucose and iron) which showed limited growth (OD 0.13 at T1, 0.28-0.33 at T2, 0.26 at T3). While M9F cultures showed continued growth from T2 to T3, the growth rate slowed down during this period, indicating the beginning of transition towards stationary phase. The M9 cultures appeared to reach a growth plateau by T3, while M9F cultures maintained higher densities despite the growth deceleration, suggesting nutrient limitation in the M9 condition. Biological replicates showed excellent reproducibility validating the experimental design.

Cells were collected at each timepoint (T1, T2, T3) from all biological replicates for subsequent single-cell RNA-seq analysis using the Microbial split-pool ligation transcriptomics (microSPLiT) protocol [@gaisser2024; @kuchina2021].

## microSPLiT protocol

MicroSPLiT [@gaisser2024; @kuchina2021] is a high-throughput single-cell RNA sequencing method for bacteria, capable of profiling transcriptional states in hundreds of thousands of cells per experiment without the need for specialized equipment [@gaisser2024;@nishimura2025]. Unlike other single-cell RNA-seq approaches that require physical isolation of individual cells (e.g., plate-based or droplet-based methods), microSPLiT uses a split-pool barcoding strategy to uniquely label transcripts within each cell. 

::: {.callout-tip}
## Information

The microSPLiT strategy will not be described in detail here; for more information, see Gaisser protocol. @gaisser2024. Only the key steps necessary for a general understanding of the method are presented below.
:::


![MicroSPLiT in-cell cDNA barcoding scheme (from Gaisser et al. 2024) @gaisser2024](../figures/protocol.png){#fig-protocol}

*a, Bacterial cells are fixed overnight and permeabilized before the mRNA is preferentially polyadenylated. After mRNA enrichment, cells may contain both polyadenylated and non-polyadenylated mRNA. b, Cells are distributed into the first barcoding plate, and the mRNA is reverse transcribed by using a mixture of poly-dT and random hexamer primers carrying a barcode (barcode 1, BC1) and a 5' phosphate for future ligation at their 5' end. After the barcoding reaction, cells are pooled together and split again into the second barcoded plate. c, Ligation adds a 5' phosphorylated barcode 2 (BC2) to BC1 with a linker strand. A blocking solution is then added to each of the wells of the second plate, preventing any unreacted BC2 from future ligation. Cells are pooled and split into the third and final barcoded plate. d, A second ligation step adds barcode 3 (BC3) with another linker strand. BC3 also contains a 5' biotin, a primer binding site and a unique molecular identifier (UMI). A blocking solution for the R3 linker is added to each of the wells in the plate before the final pooling of cells. This results in uniquely barcoded cells that can be distributed in aliquots into sub-libraries and stored until future use or used immediately for library preparation. (R1, round 1; R2, round 2; R3, round 3). @gaisser2024*

### Fixation and permeabilization

The first step is fixation of the bacterial suspension with formaldehyde @fig-protocol immediately after sampling the 18 conditions @fig-experimental-design. This preserves the transcriptomic state and cross-links RNA to proteins, preventing leakage of each cell's transcriptome. Next, cells are permeabilized using mild detergent and lysozyme, allowing enzymes and oligonucleotides to access intracellular RNA for barcoding.

::: {.callout-note}
## Note

Adequate permeabilization is essential for efficient barcoding, but over-permeabilization can compromise cell integrity. For successful single-cell resolution, cells must remain intact after permeabilization to allow multiple split-pool steps and retain cross-linked RNA. @fig-protocol
:::

### mRNA enrichment

After permeabilization, the transcripts in the fixed and permeabilized cells undergo in situ polyadenylation with the addition of a poly(A) polymerase (PAP) and ATP. This step enriches for mRNA in the total barcoded RNA pool because, under these conditions, PAP preferentially polyadenylates mRNA as opposed to ribosomique RNA (rRNA) @fig-protocol.

### Barcoding
::: {.callout-tip}
**The protocol utilizes several rounds of split-pool barcoding where cells are distributed into 96-well plates, barcoded, pooled, and redistributed for subsequent rounds, creating unique barcode combinations that identify individual cells.**
:::
#### Barcoding round 1 (R1) to identify the condition and the technical replicate

Each of the 18 samples is split into 5 technical replicates for barcoding, resulting in 90 subsamples. These technical replicates are then distributed into individual wells of a 96-well plate (6 wells not used), with each well containing uniquely barcoded primers @fig-protocol. In each well, mRNA is reverse transcribed into cDNA using a mix of barcoded poly(T) and random hexamer primers. The primers used in each well contain either a dT15 sequence to capture polyadenylated mRNA or six random nucleotides to bind any RNA, followed by a universal sequence for subsequent ligation steps. By assigning each technical replicate to a specific well, all cells in the same well receive the same unique barcode during reverse transcription. This allows each technical replicate and condition to be identified later based on the first barcode.

#### Barcoding rounds 2 (R2) and 3 (R3) for unique cell and transcript identification

Cells are then pooled, washed and randomly redistributed into a new 96-well plate (round 2 (R2) ligation working plate) containing a second set of well-specific barcodes, which are appended to the first barcode on the cDNA through an in-cell ligation reaction @fig-protocol. Due to the random redistribution of cells, each well of the second-round plate is likely to contain a mix of cells with different first-round barcodes, resulting in highly diverse barcode combinations. The ligation reaction is carried out by the T4 DNA ligase, which requires double-stranded DNA. Therefore, in the second barcoding plate, each barcode is first hybridized to a short linker oligonucleotide whose overhang is complementary to the universal sequence at the 5' end of the RT barcodes. @fig-protocol.

::: {.callout-note}
## Note

After the ligation step, some barcodes may remain unreacted in the solution. To prevent these free barcodes from attaching non-specifically to DNA from other cells during pooling, a blocker strand is added. This blocker has a longer complementary region to the linker, allowing it to displace any unreacted barcodes from the linker and thus ensures that only correctly ligated barcodes remain attached to the cDNA. @fig-protocol
:::

Cells are then pooled again, and a split-ligation-pool cycle is repeated for the second time. Cells are randomly distributed into a third 96-well plate (round 3 (R3) ligation working plate), which is loaded with barcoded oligonucleotides containing the third cell barcode annealed with a linker, a 10-base Unique Molecular Identifier (UMI), a universal PCR handle and a 5' biotin^[Biotin is a small vitamin molecule that binds with extremely high affinity to streptavidin. This biotin-streptavidin interaction is used for the selective capture and purification of biotinylated cDNA molecules on streptavidin-coated beads during the library preparation process.] molecule. The ligation reaction is stopped by adding a second blocker strand and EDTA.

::: {.callout-warning}
## Warning

In our experiment, only 95 out of the 96 wells of the R3 plate are used to minimize potential bias in cell distribution. This setup allows for 90 × 96 × 95 = **820,800 possible barcode combinations**, enabling the identification of up to 820,800 individual cells.
:::

### Sub-library and sequencing preparation

The pooled cells are washed, counted, and divided into multiple sub-libraries. Only sub-libraries containing approximately 3,000 cells were selected for sequencing, in order to maximize sequencing depth per cell and minimize barcode collision rates which is the probability that two cells receive the same barcode combination.

After lysis and cDNA purification on streptavidin beads (@fig-protocol-p2), a second reverse transcription is performed to improve cDNA yield, during which a template switch oligo (TSO) is added to introduce a 3' adapter. The resulting cDNA is then amplified by PCR. Following amplification, a size selection step removes short byproducts such as adapter or barcode dimers, ensuring that only high-quality cDNA fragments are retained for sequencing.

To optimize sequencing depth, the final library was split into four sub-libraries, each receiving a distinct index during adapter ligation: BC_0076 (CAGATC), BC_0077 (ACTTGA), BC_0078 (TAGCTT), and BC_0079 (GGCTAC). These indexes were used solely to improve sequencing quality and balance on the NovaSeq platform, without introducing any experimental or technical variation between sub-libraries.

### Sequencing and demultiplexing sub-libraries

Sequencing was performed on a NovaSeq^TM^ X plus instrument at GenoBIRD platform in paired-end mode. The library pool was loaded onto all lanes of the flowcell at a final concentration of 200 pM with 20% PhiX^[PhiX is a control library containing a known viral genome sequence that is spiked into sequencing runs to monitor sequencing quality, calibrate base calling, and provide a reference for quality control metrics. It helps ensure accurate sequencing performance and data quality assessment.]. The sequencing program consisted of 241 cycles for Read 1, 6 cycles for Index i7 and 91 cycles for Read 2. The sequencing facility performed demultiplexing of sub-libraries, resulting in eight FASTQ files (R1 and R2 for each index). R1 files contain the cDNA sequences, while R2 files contain the cell barcodes (from the three split-pool rounds) and unique molecular identifiers (UMIs).

-   For each index, two paired-end FASTQ files were generated :
    -   **R1** contains the cDNA sequence of interest (transcriptome).
    -   **R2** contains the cell barcodes and unique molecular identifiers (UMIs).

## Pipeline for microSPLiT data processing

![Comprehensive pipeline for microSPLiT single-cell RNA-seq data processing.](../figures/pipeline.png){#fig-pipeline fig-cap="Comprehensive pipeline for microSPLiT single-cell RNA-seq data processing."}

*The workflow encompasses the complete analytical process from raw sequencing data to biological interpretation, including quality control and preprocessing of FASTQ files, alignment and quantification using STARsolo, data structuring with metadata assignment, quality filtering and integration, single-cell and pseudobulk analysis approaches, population characterization through clustering and trajectory inference, and downstream expression analysis including differential expression, co-expression networks, and gene ontology enrichment. @fig-pipeline*

### Preprocessing of the sequencing data

All quality control, trimming, alignment, barcode reading and generation of cell-gene count matrix steps were performed on the GenOuest high-performance computing cluster using SLURM job scripts and parallelization to ensure efficient and reproducible analysis of large-scale sequencing data.

#### Quality control and trimming

Read quality was initially assessed for all four libraries (R1 and R2) using FastQC [@babraham] and MultiQC[@ewels2016]. Trimming was then performed with Cutadapt [@martin2011] and Fastp [@chen2018] to clean the sequencing data. For R2 files, trimming focused on filtering for valid barcodes. For R1 files, trimming removed various artifacts: template-switching oligo (TSO) sequences at the 5' end, adapter sequences, and 3' artifacts including polyG stretches (NovaSeq-specific artifacts) and potential R1 complement sequences when cDNA was short. Only reads with a minimum length of 25 bp were kept. The detailed trimming pipeline is described in Appendix Section @sec-appendix-trimming-steps. After trimming, read quality was reassessed with FastQC [@babraham] and MultiQC [@chen2018], and results were merged into unique files (R1 and R2).

#### Quality control after trimming

After trimming, a quality control step was performed to ensure that the remaining reads were of high quality and suitable for downstream analysis. This step involved checking the distribution of read lengths, GC content, and other relevant metrics.

#### Merge files

After quality control, the files from all four libraries (R1 and R2 for each index) were merged into a single file for each index. This step ensured that all cells from all conditions and technical replicates were included in the analysis.

#### Alignment, barcode reading and generation of cell-gene count matrix

The alignment and quantification pipeline was implemented using STARsolo [@dobin2013; @kaminow], an extension of the STAR aligner specifically designed for single-cell RNA-seq data. STARsolo was chosen based on benchmarking studies showing it offers the best combination of speed and reproducibility for SPLiT-seq / microSPLiT data analysis [@kuijpers2024]. The implementation followed the recommendations outlined in Gaisser et al @gaisser2024 for optimal microSPLiT data processing. Complete pipeline scripts and parameters are detailed in Appendix Section @sec-appendix-starsolo.

**Reference genome and annotation.** The reference genome of *Pseudomonas brassicacearum* R401: [ASM3006410v1 (GCA_030064105.1)](https://www.ncbi.nlm.nih.gov/datasets/genome/GCA_030064105.1/) and its [annotation](https://www.ncbi.nlm.nih.gov/datasets/gene/GCA_030064105.1/) were downloaded from GenBank. The GFF3 annotation file was converted to GTF format using gffread (Cufflinks[@trapnell2010] package) for compatibility with STARsolo.

**Correcting GTF file for compatibility with STAR.** The conversion was verified to ensure all required fields were present, particularly confirming that genes were labeled as 'exon' features rather than 'CDS' descriptors, and that chromosome names matched between reference sequence and annotation files. This correction was performed to ensure proper compatibility with STARsolo.

**Alignment parameters.** The pipeline used optimized parameters for microSPLiT data: minimum 50 matching bases for valid alignment and 1 mismatch tolerance for both barcode and UMI matching. The complex barcode structure (R2) was configured with positions 0_10_0_17, 0_48_0_55, and 0_78_0_85 for the three barcoding rounds, and UMI position 0_0_0_9.

**Output matrices.** STARsolo generated count matrices of gene counts for each cell (N-by-K matrix, with N cells and K genes) using `GeneFull` feature counting and `UniqueAndMult-Uniform` mapping strategy (which distributes multi-mapped reads uniformly). Although bacteria lack introns, `GeneFull` was chosen to include reads that may map to intergenic regions or incompletely annotated gene boundaries, which is common in bacterial genomes. The `UniqueAndMult-Uniform` strategy is particularly important for bacterial genomes due to the presence of paralogous genes, repetitive sequences, and operon structures that can result in reads mapping to multiple genomic locations. Raw data matrices (unfiltered barcodes) were used for downstream analysis @gaisser2024, with cell filtering applied later in the processing pipeline.

**Quality control and output files.** After STARsolo analysis, quality control was performed using the Log.final.out and summary.csv files. The main output files for downstream analysis included barcode.tsv (cell identifiers), features.tsv (gene identifiers), and UniqueAndMult-Uniform.mtx (count matrix).

### Single-cell data processing

All downstream analyses were performed locally using a reproducible development container environment (Docker[@merkel2014] and [Rocker Project](https://rocker-project.org/images/devcontainer/features.html)) with Visual Studio Code dev containers to ensure consistent software versions and analysis reproducibility, including version control for R and Python packages.

#### Data conversion and metadata assignment.

Raw count matrix was converted to [Seurat v5](https://satijalab.org/seurat/) objects [@hao2024] in R and  AnnData objects [@virshup2024] for use with [Scanpy](https://scanpy.readthedocs.io/en/stable/) [@wolf2018]. Two types of metadata were assigned:

-   **Cell metadata** based on barcode combinations, linking each cell to its experimental condition (medium type, biological and technical replicate, timepoint, and well plate position at each barcoding round)
-   **Gene metadata** including sequence type and gene symbols for downstream analysis.

#### Quality control and filtering.

A multi-step filtering strategy was implemented to ensure data quality and remove technical artifacts while preserving biological variation. The filtering pipeline was designed to address specific challenges of microSPLiT data and experimental design considerations.

**Initial UMI-based filtering.** Cells with fewer than 100 unique molecular identifiers (UMIs) were excluded from the analysis. This threshold was chosen based on preliminary analysis showing clear differences in UMI distributions between the two culture conditions (M9 vs M9F), while also serving as a quality control metric to identify potentially failed technical replicates.

**Doublet removal.** To identify potential doublets, the top-performing cells from each technical replicate were first filtered based on UMI counts. The distribution of UMI counts per cell was examined within these high-quality cells to detect outliers that deviated significantly from the expected distribution, which typically represent potential doublets or technical artifacts (visual inspection of the distribution of UMI counts per cell). A comprehensive list of these putative doublets was compiled and subsequently removed from the initial dataset to ensure data quality.

**Biological replicate-based filtering.** To ensure robust representation of each experimental condition, filtering was applied at the biological replicate level to obtient approxymaly 165 cells per condition, that represente a total of 3000 cells. For each biological replicate at each optical density timepoint (T1, T2, T3) for both culture conditions (M9, M9F), only the most deeply sequenced cells were retained. This approach allowed for the selection of the best-performing technical replicates. Then, in each of the 18 conditions, technical replicates containing fewer than 5 cells were removed.

**Transcript type filtering.** Only mRNA transcripts were retained for analysis, filtering out ribosomal RNA (rRNA), transfer RNA (tRNA), and other non-coding RNA species.

**Gene expression filtering.** Genes expressed in fewer than 5 cells across the entire dataset were removed to eliminate low-quality or spurious gene detection events and focus on robustly detected transcripts.



::: {.callout-warning}
## Warning

The filtering thresholds used in this study were chosen arbitrarily, as each single-cell RNA-seq study typically defines its own filtering criteria. These choices may have implications for the interpretation of results, particularly regarding the representation of different cell states and the detection of rare cell populations. The potential biases introduced by these filtering strategies will be discussed in the Results and Discussion sections, as this is a common limitation across single-cell RNA-seq studies in the field.
:::


### Single-cell analysis

For this first approach to single-cell RNA-seq analysis, the complete dataset with all conditions pooled together was analyzed, rather than focusing on specific sub-conditions (Culture Medium × Biological Replicate × Sampling Time). The primary objective was to validate that the dataset contains sufficient signal to distinguish between culture media conditions at a global level before conducting more detailed condition-specific analyses. While the main biological question is to investigate Division of Labor (DoL) within the bacterial population, this approach did not directly address this question but served as a foundation for understanding data quality and taking a broad exploratory view of the data.

#### General analytical approach

The analysis workflow encompassed several key steps: Normalization and scaling, feature selection, dimensionality reduction, clustering, and differential expression analysis. We systematically tested different parameters and methodologies to optimize each step of the pipeline. We followed the [Scanpy tutorial](https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html) for the general approach and implemented the BacSC protocol (preprint @ostner), a computational pipeline designed to limit methodological biases in bacterial single-cell analysis. We tested BacSC specifically for normalization, scaling and feature selection, and its output was then used for subsequent dimensionality reduction and clustering steps. 



**Normalization, scaling and feature selection.** We implemented the BacSC protocol (currently a preprint @ostner), a fully data-driven computational pipeline based on the Python version of Seurat's SCTransform tool. SCTransform is an advanced normalization method that replaces the classical steps of normalization + log-transformation + variable gene selection. It performs variance stabilizing transformation (VST) to correct for differences in sequencing depth between cells, stabilizes variance across genes, and automatically identifies the most informative genes for biological variation. This automated pipeline selects optimal features for normalization and feature selection without requiring manual intervention. 

**Principal component analysis (PCA).** PCA was computed using `sc.pp.pca`, with the number of principal components systematically tested at multiple levels (i.e. 3, 10, 20, 50) depending on the data characteristics. The optimal number of components was determined using Scanpy's `sc.pl.pca_variance_ratio` plot, which displays the explained variance ratio for each principal component, allowing us to identify the elbow point where additional components provide diminishing returns in variance explanation.

**Clustering and visualization.** We computed shared nearest neighbor graphs using `sc.pp.neighbors` and tested multiple clustering algorithms including Leiden clustering (`sc.tl.leiden`) with different resolution parameters (i.e. 0.3, 0.5, 0.8, 1.0, 2.0) to identify the optimal clustering granularity. Uniform manifold approximation and projection (UMAP) was computed using `sc.tl.umap` for visualization, with parameters optimized for bacterial single-cell data. For comparison and validation purposes, we also performed the same analytical workflow using Seurat v5, which yielded similar results and performance, confirming the robustness of our analytical approach across different computational frameworks.


**Differential expression analysis**

Differential gene expression analysis was performed using Scanpy's gene ranking functions (`sc.tl.rank_genes_groups` and `sc.get.rank_genes_groups_df`) to compare expression patterns between experimental conditions. Statistical outputs included gene names, z-scores, log fold changes, p-values, and adjusted p-values for robust identification of differentially expressed genes.


### Analytical scope and limitations

As mentioned in the pipeline description (@fig-pipeline), this study focuses on the fundamental analytical steps: data quality assessment, basic clustering and visualization, and initial differential expression analysis between culture conditions. The more advanced analytical approaches such as pseudobulk analysis, trajectory inference, gene co-expression networks, and gene ontology enrichment were not pursued at this exploratory stage. 












